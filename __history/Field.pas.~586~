unit Field;

interface

uses Winapi.Windows, Winapi.Messages, System.SysUtils, System.Types,
  System.Variants, Vcl.ExtCtrls, System.Classes, Vcl.Forms,
  Vcl.StdCtrls, System.Generics.Collections, Vcl.Controls, Vcl.Graphics, Math,
  expression, scrollBox, MyParser;

type
  TPaintBox = class(Vcl.ExtCtrls.TPaintBox)
  public
    function getNewFrame: TBitMap;

  var
    offset: TPointF;
    scale: double;
    cellG: TPointF;
    cell: TPointF;
    FScrollBOx: scrollBox.TScrollBox;
    bounds: TRectF;
  private

  end;

implementation

function getNearest(a: double): double;
begin
  if a < 1.5 then
    Result := 1
  else if a < 3.5 then
    Result := 2
  else if a < 7.5 then
    Result := 5
  else
    Result := 10;
end;

procedure GetScientificNotation(Value: double; out Mantissa: double;
  out Exponent: Integer);

begin
  if Value = 0 then
  begin
    Mantissa := 0;
    Exponent := 0;
    Exit;
  end;

  // Вычисляем порядок (экспоненту) через Log10
  Exponent := Floor(Log10(Abs(Value)));

  // Вычисляем мантиссу: делим число на 10^Exponent
  Mantissa := Value / Power(10, Exponent);

  // Корректируем, если мантисса вышла за границы [1, 10)
  if Abs(Mantissa) >= 10 then
  begin
    Mantissa := Mantissa / 10;
    Inc(Exponent);
  end
  else if Abs(Mantissa) < 1 then
  begin
    Mantissa := Mantissa * 10;
    Dec(Exponent);
  end;
end;

procedure DrawDirR(var map: TBitMap; size: Tpoint);
var
  position: Tpoint;
begin
  position.X := map.Canvas.ClipRect.Width - size.X;
  position.Y := Round((map.Height - size.Y) / 2);
  map.Canvas.PenPos := position;
  map.Canvas.LineTo(map.Width, position.Y + Round(size.Y / 2));
  map.Canvas.LineTo(position.X, position.Y + size.Y);
  map.Canvas.TextOut(position.X, position.Y - 20, 'X');

end;

procedure DrawDirU(var map: TBitMap; size: Tpoint);
var
  position: Tpoint;
begin
  position.Y := size.Y;
  position.X := Round((map.Width - size.X) / 2);
  map.Canvas.PenPos := position;
  map.Canvas.LineTo(position.X + Round(size.X / 2), 0);
  map.Canvas.LineTo(position.X + size.X, position.Y);
  map.Canvas.TextOut(position.X - 12, 0, 'Y');
end;

function TPaintBox.getNewFrame: TBitMap;
var

  mantisa: double;
  Exponent: Integer;
  function GetPoint(p: TPointF): Tpoint;
  begin
    Result.X := Round((p.X - bounds.Left) * cell.X);
    Result.Y := Height - Round((p.Y - bounds.Bottom) * cell.Y);
  end;

begin
  Result := TBitMap.Create;
  Result.Width := Width;
  Result.Height := Height;
  Result.Canvas.Pen.Width := Round(sqrt(Result.Width * Result.Height) / 400);
  Result.Canvas.Font.Name := 'Arial';
  Result.Canvas.Font.size := 8;
  Result.Canvas.Font.Color := clBlack;
  Result.Canvas.Font.Style := [fsBold];
  cell.X := Width / 10 * scale;
  cell.Y := Height / 10 * scale;

  bounds.Left := (-5 / scale + offset.X);
  bounds.Top := (5 / scale + offset.Y);
  bounds.Bottom := bounds.Top - (10 / scale);
  bounds.Width := 10 / scale;

  cellG.X := bounds.Width / 10;
  GetScientificNotation(cellG.X, mantisa, Exponent);
  cellG.X := getNearest(mantisa);
  cellG.X := cellG.X * Math.Power(10, Exponent);

  cellG.Y := bounds.Height / 10;
  GetScientificNotation(cellG.Y, mantisa, Exponent);
  cellG.Y := getNearest(Abs(mantisa));
  cellG.Y := cellG.Y * Math.Power(10, Exponent);

  // X Line
  if bounds.Top * bounds.Bottom < 0 then
  begin
    Result.Canvas.PenPos :=
      Point(0, Height - Round(((0 - bounds.Bottom) * cell.Y)));
    Result.Canvas.LineTo(self.Width, Result.Canvas.PenPos.Y);
  end;
  // Y Line
  if bounds.Left * bounds.right < 0 then
  begin
    Result.Canvas.PenPos := Point(Round((0 - bounds.Left) * cell.X), 0);
    Result.Canvas.LineTo(Result.Canvas.PenPos.X, self.Height);
  end;

  // Dirs
  // DrawDirR(Result, Point(Round(Width * 0.02), Round(Height * 0.02)));
  // DrawDirU(Result, Point(Round(Width * 0.02), Round(Height * 0.02)));

  Result.Canvas.Pen.Width := Round(sqrt(Result.Width * Result.Height) / 800);
  Result.Canvas.Pen.Color := clGray;
  var
    temp, val: double;

  var
    tempInt, tempInt2: Integer;

  GetScientificNotation(cellG.X, mantisa, Exponent);
  tempInt := Round(bounds.Left / Math.Power(10, Exponent));
  temp := tempInt / Round(mantisa);
  tempInt := Math.Floor(temp) * Round(mantisa);
  temp := tempInt * Math.Power(10, Exponent);

  While temp <= bounds.right do
  begin
    tempInt := Round((temp - bounds.Left) * cell.X);
    Result.Canvas.MoveTo(tempInt, 0);
    Result.Canvas.LineTo(tempInt, Height);
    if (Abs(cellG.X) > 0.01) and (Abs(cellG.X) < 1) then
      Result.Canvas.TextOut(tempInt - 30, Height - 20,
        FloatToStrF(temp, ffFixed, 15, 2))
    else if (Abs(cellG.X) >= 1) and (Abs(cellG.X) < 100) then
      Result.Canvas.TextOut(tempInt - 15, Height - 20,
        FloatToStrF(temp, ffFixed, 15, 0))
    else
    begin

      GetScientificNotation(temp, mantisa, Exponent);
      Result.Canvas.TextOut(tempInt - 44, Height - 15,
        FloatToStrF(mantisa, ffFixed, 4, 2) + 'E' + IntToStr(Exponent))
    end;

    temp := temp + cellG.Y;
  end;

  GetScientificNotation(cellG.Y, mantisa, Exponent);
  tempInt := Round(bounds.Bottom / Math.Power(10, Exponent));
  temp := tempInt / Round(mantisa);
  tempInt := Math.Floor(temp) * Round(mantisa);
  temp := tempInt * Math.Power(10, Exponent);

  While temp <= bounds.Top do
  begin
    tempInt := Height - Round((temp - bounds.Bottom) * cell.Y);
    Result.Canvas.MoveTo(0, tempInt);
    Result.Canvas.LineTo(Width, tempInt);
    val := (temp);
    if (Abs(cellG.X) > 0.01) and (Abs(cellG.X) < 1) then
      Result.Canvas.TextOut(0, tempInt - 15, FloatToStrF(val, ffFixed, 15, 2))
    else if (Abs(cellG.X) >= 1) and (Abs(cellG.X) < 100) then
      Result.Canvas.TextOut(0, tempInt - 15, FloatToStrF(val, ffFixed, 15, 0))
    else
    begin

      GetScientificNotation(val, mantisa, Exponent);
      Result.Canvas.TextOut(0, tempInt - 10, FloatToStrF(mantisa, ffFixed, 4, 2)
        + 'E' + IntToStr(Exponent))
    end;

    temp := temp + cellG.Y;
  end;
  Result.Canvas.Pen.Width := Round(sqrt(Result.Width * Result.Height) / 400);
  for var item in FScrollBOx.Items do
  begin
    if item.visibleBtn.Caption = '👁' then
    begin

      Result.Canvas.Pen.Color := item.colBox.Selected;
      var
        X, Y: double;
      var
        pTemp: Tpoint;
      var
      flag := false;
      temp := bounds.Width / Width;
      X := bounds.Left;
      while X <= bounds.right do
      begin

        if MyParser.Evaluate(item.Edit.Text, X, Y) then
        begin

          if (Y < bounds.Bottom) then
            if Y > bounds.Bottom * 10 then
              Y := bounds.Bottom
            else
              flag := false;
          if Y > bounds.Top then
            if Y < bounds.Top * 10 then
              Y := bounds.Top
            else
              flag := false;

          begin
            pTemp := GetPoint(PointF(X, Y));
            if flag then
              Result.Canvas.LineTo(pTemp.X, pTemp.Y)
            else
            begin
              Result.Canvas.MoveTo(pTemp.X, pTemp.Y);
              flag := true;

            end;
          end

        end
        else
          flag := false;
        X := X + temp;

      end;
    end;

  end;

end;

end.
